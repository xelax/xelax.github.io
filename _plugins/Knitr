module Jekyll
  class KnitrConverter < Converter
    safe true
    priority :low

    def matches(ext)
      ext =~ /^\.Rmd$/i
    end

    def output_ext(ext)
      ".html"
    end

      KNITR_CHUNK = "```{r"

    def convert(content)
        setup

        # do extra knitr step if we find a knitr code chunk
        content = knit(content) # if content.include? KNITR_CHUNK

        @parser.convert(content)
      end

      # call KnitRuby, provided by knitr-ruby gem
      def knit(content)
        @knitr = KnitrRuby::Knitr.new(chunk_options: options)
        content = @knitr.knit(content)

        # fix img links for the figures that were generated
        content = content.gsub("#{@config['baseurl']}/#{@config['destination']}", "#{@config['baseurl']}/")
      end

      # merge default options and options from _config.yml
      # turn into string with named args, e.g. fig.width=10
      def options
        { "fig.show" => "hold",
          "fig.path" => "#{@config['destination']}figures/",
          "fig.width" => 10,
          "fig.height" => 7,
          "dev" => "svg" }.merge(@config['knitr'])
    end
  end
end